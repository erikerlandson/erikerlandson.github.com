<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: polynomials | tool monkey]]></title>
  <link href="http://erikerlandson.github.com/blog/categories/polynomials/atom.xml" rel="self"/>
  <link href="http://erikerlandson.github.com/"/>
  <updated>2019-01-04T07:57:28-07:00</updated>
  <id>http://erikerlandson.github.com/</id>
  <author>
    <name><![CDATA[Erik Erlandson]]></name>
    <email><![CDATA[erikerlandson@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Equality Constraints for Cubic B-Splines]]></title>
    <link href="http://erikerlandson.github.com/blog/2018/09/08/equality-constraints-for-cubic-b-splines/"/>
    <updated>2018-09-08T14:32:00-07:00</updated>
    <id>http://erikerlandson.github.com/blog/2018/09/08/equality-constraints-for-cubic-b-splines</id>
    <content type="html"><![CDATA[<p>In my <a href="http://erikerlandson.github.io/blog/2018/09/02/putting-cubic-b-splines-into-standard-polynomial-form/">previous post</a>
I derived the standard-form polynomial coefficients for cubic B-splines.
As part of the <a href="https://github.com/erikerlandson/snowball">same project</a>,
I also need to add a feature that allows the library user to declare equality constraints of the form <nobr>(x,y)</nobr>,
where <nobr>S(x) = y</nobr>. Under the hood, I am invoking a <a href="https://github.com/erikerlandson/gibbous">convex optimization</a> library, and so I need to convert these
user inputs to a linear equation form that is consumable by the optimizer.</p>

<p>I expected this to be tricky, but it turns out I did most of the work <a href="http://erikerlandson.github.io/blog/2018/09/02/putting-cubic-b-splines-into-standard-polynomial-form/">already</a>.
I can take one of my previously-derived expressions for S(x) and put it into a form that gives me coefficients for the four contributing knot points <nobr>K<sub>j-3</sub> ... K<sub>j</sub></nobr>:</p>

<p><img src="/assets/images/bspline/ybblhxfw.png" alt="eq" /></p>

<p>Recall that by the convention from my previous post, <nobr>K<sub>j</sub></nobr> is the largest knot point that is <nobr>&lt;= x</nobr>.</p>

<p>My linear constraint equation is with respect to the vector I am solving for, in particular vector (τ), and so the
equation above yields the following:</p>

<p><img src="/assets/images/bspline/y7jhvnmk.png" alt="eq" /></p>

<p>In this form, it is easy to add into a <a href="https://github.com/erikerlandson/gibbous">convex optimization</a> problem as a linear equality constraint.</p>

<p>Gradient constraints are another common equality constraint in convex optimization, and so I can apply very similar logic to get coefficient values corresponding to the gradient of S:</p>

<p><img src="/assets/images/bspline/yd5fxmwk.png" alt="eq" /></p>

<p>And so my linear equality constraint with respect to (τ) in this case is:</p>

<p><img src="/assets/images/bspline/yalk3puu.png" alt="eq" /></p>

<p>And that gives me the tools I need to let my users supply additional equality constraints as simple <nobr>(x,y)</nobr> pairs, and translate them into a form that can be consumed by convex optimization routines. Happy Computing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting Cubic B-Splines into Standard Polynomial Form]]></title>
    <link href="http://erikerlandson.github.com/blog/2018/09/02/putting-cubic-b-splines-into-standard-polynomial-form/"/>
    <updated>2018-09-02T11:07:00-07:00</updated>
    <id>http://erikerlandson.github.com/blog/2018/09/02/putting-cubic-b-splines-into-standard-polynomial-form</id>
    <content type="html"><![CDATA[<p>Lately I have been working on an <a href="https://github.com/erikerlandson/snowball">implementation</a> of monotone smoothing splines, based on <a href="#ref1">[1]</a>. As the title suggests, this technique is based on a univariate cubic <a href="https://en.wikipedia.org/wiki/B-splines">B-spline</a>. The form of the spline function used in the paper is as follows:</p>

<p><img src="/assets/images/bspline/yd2guhxt.png" alt="eq1" /></p>

<p>The knot points <nobr>K<sub>j</sub></nobr> are all equally spaced by 1/α, and so α normalizes knot intervals to 1. The function <nobr>B<sub>3</sub>(t)</nobr> and the four <nobr>N<sub>i</sub>(t)</nobr> are defined in this transformed space, t, of unit-separated knots.</p>

<p>I'm interested in providing an interpolated splines using the Apache Commons Math API, in particular the <a href="https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a> class. In principle the above is clearly such a polynomial, but there are a few hitches.</p>

<ol>
<li><code>PolynomialSplineFunction</code> wants its knot intervals in closed standard polynomial form <nobr>ax<sup>3</sup> + bx<sup>2</sup> + cx + d</nobr></li>
<li>It wants each such polynomial expressed in the translated space <nobr>(x-K<sub>j</sub>)</nobr>, where <nobr>K<sub>j</sub></nobr> is the greatest knot point that is &lt;= x.</li>
<li>The actual domain of S(x) is <nobr>K<sub>0</sub> ... K<sub>m-1</sub></nobr>. The first 3 "negative" knots are there to make the summation for S(x) cleaner. <code>PolynomialSplineFunction</code> needs its functions to be defined purely on the actual domain.</li>
</ol>


<p>Consider the arguments to <nobr>B<sub>3</sub></nobr>, for two adjacent knots <nobr>K<sub>j-1</sub></nobr> and <nobr>K<sub>j</sub></nobr>, where <nobr>K<sub>j</sub></nobr> is greatest knot point that is &lt;= x. Recalling that knot points are all equally spaced by 1/α, we have the following relationship in the transformed space t:</p>

<p><img src="/assets/images/bspline/ydcb2ao3.png" alt="eq" /></p>

<p>We can apply this same manipulation to show that the arguments to <nobr>B<sub>3</sub></nobr>, as centered around knot <nobr>K<sub>j</sub></nobr>, are simply <nobr>{... t+2, t+1, t, t-1, t-2 ...}</nobr>.</p>

<p>By the definition of <nobr>B<sub>3</sub></nobr> above, you can see that <nobr>B<sub>3</sub>(t)</nobr> is non-zero only for t in <nobr>[0,4)</nobr>, and so the four corresponding knot points <nobr>K<sub>j-3</sub> ... K<sub>j</sub></nobr> contribute to its value:</p>

<p><img src="/assets/images/bspline/y9tpgfqj.png" alt="eq2" /></p>

<p>This suggests a way to manipulate the equations into a standard form. In the transformed space t, the four nonzero terms are:</p>

<p><img src="/assets/images/bspline/ya6gsrjy.png" alt="eq4" /></p>

<p>and by plugging in the appropriate <nobr>N<sub>i</sub></nobr> for each term, we arrive at:</p>

<p><img src="/assets/images/bspline/yc6grwxe.png" alt="eq5" /></p>

<p>Now, <code>PolynomialSplineFunction</code> is going to automatically identify the appropriate <nobr>K<sub>j</sub></nobr> and subtract it, and so I can define <em>that</em> transform as <nobr>u = x -  K<sub>j</sub></nobr>, which gives:</p>

<p><img src="/assets/images/bspline/y9p3vgqt.png" alt="eq6" /></p>

<p>I substitute the argument (αu) into the definitions of the four <nobr>N<sub>i</sub></nobr> to obtain:</p>

<p><img src="/assets/images/bspline/y8apdoqy.png" alt="eq7" /></p>

<p>Lastly, collecting like terms gives me the standard-form coefficients that I need for <code>PolynomialSplineFunction</code>:</p>

<p><img src="/assets/images/bspline/ya74mlsf.png" alt="eq8" /></p>

<p>Now I am equipped to return a <code>PolynomialSplineFunction</code> to my users, which implements the cubic B-spline that I fit to their data. Happy computing!</p>

<h4>References</h4>

<p><a name="anchor1" id="ref1">[1] </a>H. Fujioka and H. Kano: <a href="https://github.com/erikerlandson/snowball/blob/master/monotone-cubic-B-splines-2013.pdf">Monotone smoothing spline curves using normalized uniform cubic B-splines</a>, Trans. Institute of Systems, Control and Information Engineers, Vol. 26, No. 11, pp. 389–397, 2013</p>
]]></content>
  </entry>
  
</feed>
